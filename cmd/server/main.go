package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"time"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/pgx/v5"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file" // Import file source for migrations
	_ "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	_ "github.com/jackc/pgx/v5/stdlib"
	"github.com/pkg/errors"
	db "github.com/tetrex/golang-project-template/db/sqlc"
	_ "github.com/tetrex/golang-project-template/docs" // docs is generated by Swag CLI
	"github.com/tetrex/golang-project-template/pkg/server"
	"github.com/tetrex/golang-project-template/utils/config"
	"github.com/tetrex/golang-project-template/utils/logger"
)

// @title			server api
// @version			1.0
// @description		This is a backend api server
// @contact.name	github.com/tetrex
// @license.name	MIT License
//
// @host			localhost:8000
// @basePath		/
func main() {
	// load config
	config, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("cannot load config ")
		log.Fatal(err.Error())
	}

	l := logger.New(config.AppEnv)

	// pg connection
	db_config, err := pgxpool.ParseConfig(config.PgConnStr)
	if err != nil {
		l.Fatal().Err(errors.Errorf("cannot connect to to db"))
	}

	db_config.MaxConns = 20                     // Maximum number of connections in the pool
	db_config.MaxConnLifetime = 5 * time.Minute // Maximum lifetime of a connection
	db_config.MaxConnIdleTime = 2 * time.Minute // Maximum time a connection can remain idle

	// ------------
	db_pool, err := pgxpool.NewWithConfig(context.Background(), db_config)
	if err != nil {
		l.Fatal().Err(errors.Errorf("cannot connect to db db_pool"))
	}
	defer db_pool.Close()
	queries := db.New(db_pool)

	// new server instance
	s, err := server.NewServer(&server.ServerParams{
		Config:  config,
		Logger:  l,
		Queries: queries,
	})
	if err != nil {
		l.Fatal().Err(errors.Errorf("cannot create new server"))
	}

	router := s.GetRouter()

	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)
	defer stop()
	// some specific tasks
	switch config.AppEnv {
	case "stage":
	case "prod":
		go func() {
			// ---
			server_crt := "/ssl_cert/combined.crt"
			server_key := "/ssl_cert/star_lykstage_com.key"

			l.Log().Msgf("Starting server :: %d", 443)
			if err := router.StartTLS(
				fmt.Sprintf(":%d", 443), server_crt, server_key); err != nil && err != http.ErrServerClosed {
				l.Fatal().Err(err)
				l.Fatal().Err(errors.Errorf("Server startup failed"))
			}
		}()
	case "local":
		_, b, _, _ := runtime.Caller(0)
		root_path := filepath.Join(filepath.Dir(b), "../../")
		m, err := migrate.New(
			"file://"+filepath.Join(root_path, "db/migrations"),
			config.PgxMigrationStr)
		if err != nil {
			l.Fatal().Err(err).Msg("Failed to create new migration")
		}

		if err := m.Up(); err != nil && err != migrate.ErrNoChange {
			l.Fatal().Err(err).Msg("Migration failed")
		}
		go func() {
			// ---
			l.Info().Msgf("Starting server :: %d", 80)
			if err := router.Start(
				fmt.Sprintf(":%d", 80)); err != nil && err != http.ErrServerClosed {
				l.Fatal().Err(errors.Errorf("Server startup failed"))
			}
		}()
	default:
		l.Fatal().Err(fmt.Errorf("deafult case in switch"))
	}

	<-ctx.Done()
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := router.Shutdown(ctx); err != nil {
		l.Fatal().Err(err)
		l.Fatal().Err(errors.Errorf("shutting down server gracefully .."))
	}
}
